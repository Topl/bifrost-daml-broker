"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[850],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var l=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,l,n=function(e,t){if(null==e)return{};var r,l,n={},a=Object.keys(e);for(l=0;l<a.length;l++)r=a[l],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)r=a[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=l.createContext({}),u=function(e){var t=l.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=u(e.components);return l.createElement(p.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=u(r),d=n,h=c["".concat(p,".").concat(d)]||c[d]||f[d]||a;return r?l.createElement(h,o(o({ref:t},s),{},{components:r})):l.createElement(h,o({ref:t},s))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:n,o[1]=i;for(var u=2;u<a;u++)o[u]=r[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1355:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var l=r(7462),n=(r(7294),r(3905));const a={sidebar_position:2},o="Command Line Reference",i={unversionedId:"reference/runtime",id:"reference/runtime",title:"Command Line Reference",description:"We intruduce the list of parameters available to start the broker.",source:"@site/docs/reference/runtime.md",sourceDirName:"reference",slug:"/reference/runtime",permalink:"/bifrost-daml-broker/docs/reference/runtime",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/bifrost-daml-broker/docs/reference/architecture"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:3},{value:"-n, --topl-network &lt;value&gt;",id:"-n---topl-network-value",level:3},{value:"-u, --topl-uri &lt;value&gt;",id:"-u---topl-uri-value",level:3},{value:"-a, --topl-api-key &lt;value&gt;",id:"-a---topl-api-key-value",level:3},{value:"-h, --daml-host &lt;value&gt;",id:"-h---daml-host-value",level:3},{value:"-p, --daml-port &lt;value&gt;",id:"-p---daml-port-value",level:3},{value:"-k, --keyfile &lt;value&gt;",id:"-k---keyfile-value",level:3},{value:"-w, --password &lt;value&gt;",id:"-w---password-value",level:3}],s={toc:u};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,l.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"command-line-reference"},"Command Line Reference"),(0,n.kt)("p",null,"We intruduce the list of parameters available to start the broker."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"We need the following parameters to launch the broker."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"Usage: bifrost-daml-broker [options]\n\n  -n, --topl-network <value>\n                           the Topl network to connect to, one of: main, valhalla, and private\n  -u, --topl-uri <value>   the URI of the Topl network to connect to, for example https://127.0.0.1/\n  -a, --topl-api-key <value>\n                           the API key for the Topl network\n  -h, --daml-host <value>  the host of the ledger, for example localhost\n  -p, --daml-port <value>  the port where the ledger is listening, for example 6865\n  -k, --keyfile <value>    the file that contains the operator key, for example keyfile.json\n  -w, --password <value>   the password for the keyfile\n")),(0,n.kt)("h3",{id:"-n---topl-network-value"},"-n, --topl-network <value",">"),(0,n.kt)("p",null,"The Topl network to connect to, potential values are: main, valhalla, and private."),(0,n.kt)("h3",{id:"-u---topl-uri-value"},"-u, --topl-uri <value",">"),(0,n.kt)("p",null,"The URI of the Topl network to connect to, for example ",(0,n.kt)("a",{parentName:"p",href:"https://127.0.0.1/"},"https://127.0.0.1/"),"."),(0,n.kt)("h3",{id:"-a---topl-api-key-value"},"-a, --topl-api-key <value",">"),(0,n.kt)("p",null,"The API key for the Topl network."),(0,n.kt)("h3",{id:"-h---daml-host-value"},"-h, --daml-host <value",">"),(0,n.kt)("p",null,"The host of the ledger, for example localhost."),(0,n.kt)("h3",{id:"-p---daml-port-value"},"-p, --daml-port <value",">"),(0,n.kt)("p",null,"The port where the ledger is listening, for example 6865."),(0,n.kt)("h3",{id:"-k---keyfile-value"},"-k, --keyfile <value",">"),(0,n.kt)("p",null,"The file that contains the operator key, for example keyfile.json. This parameter is optional. When we do not include this parameter the broker will not sign transactions as operator."),(0,n.kt)("h3",{id:"-w---password-value"},"-w, --password <value",">"),(0,n.kt)("p",null,"The password for the key file. This is only required when a key file is present."))}c.isMDXComponent=!0}}]);